{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "missing-rebate",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:10.725091Z",
          "iopub.status.busy": "2021-06-05T21:25:10.724584Z",
          "iopub.status.idle": "2021-06-05T21:25:10.736026Z",
          "shell.execute_reply": "2021-06-05T21:25:10.736654Z",
          "shell.execute_reply.started": "2021-06-05T13:10:47.254608Z"
        },
        "papermill": {
          "duration": 0.0719,
          "end_time": "2021-06-05T21:25:10.736907",
          "exception": false,
          "start_time": "2021-06-05T21:25:10.665007",
          "status": "completed"
        },
        "tags": [],
        "id": "missing-rebate"
      },
      "outputs": [],
      "source": [
        "import numpy as np \n",
        "import pandas as pd \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "second-pilot",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:10.945654Z",
          "iopub.status.busy": "2021-06-05T21:25:10.945142Z",
          "iopub.status.idle": "2021-06-05T21:25:11.619095Z",
          "shell.execute_reply": "2021-06-05T21:25:11.618635Z",
          "shell.execute_reply.started": "2021-06-05T13:10:52.898733Z"
        },
        "papermill": {
          "duration": 0.729177,
          "end_time": "2021-06-05T21:25:11.619248",
          "exception": false,
          "start_time": "2021-06-05T21:25:10.890071",
          "status": "completed"
        },
        "tags": [],
        "id": "second-pilot"
      },
      "outputs": [],
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import PorterStemmer\n",
        "\n"
      ],
      "metadata": {
        "id": "O7ZN14ClHhAF"
      },
      "id": "O7ZN14ClHhAF",
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.preprocessing.text import one_hot\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.layers import LSTM\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.layers import Embedding\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from sklearn.metrics import accuracy_score,confusion_matrix"
      ],
      "metadata": {
        "id": "0ARfgBODIVmU"
      },
      "id": "0ARfgBODIVmU",
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "chicken-harvey",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:11.826718Z",
          "iopub.status.busy": "2021-06-05T21:25:11.826076Z",
          "iopub.status.idle": "2021-06-05T21:25:11.870525Z",
          "shell.execute_reply": "2021-06-05T21:25:11.870926Z",
          "shell.execute_reply.started": "2021-06-05T13:10:57.914708Z"
        },
        "papermill": {
          "duration": 0.098552,
          "end_time": "2021-06-05T21:25:11.871051",
          "exception": false,
          "start_time": "2021-06-05T21:25:11.772499",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "chicken-harvey",
        "outputId": "16332518-5122-4c6b-c383-c494f7f8383a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     v1                                                 v2 Unnamed: 2  \\\n",
              "0   ham  Go until jurong point, crazy.. Available only ...        NaN   \n",
              "1   ham                      Ok lar... Joking wif u oni...        NaN   \n",
              "2  spam  Free entry in 2 a wkly comp to win FA Cup fina...        NaN   \n",
              "3   ham  U dun say so early hor... U c already then say...        NaN   \n",
              "4   ham  Nah I don't think he goes to usf, he lives aro...        NaN   \n",
              "\n",
              "  Unnamed: 3 Unnamed: 4  \n",
              "0        NaN        NaN  \n",
              "1        NaN        NaN  \n",
              "2        NaN        NaN  \n",
              "3        NaN        NaN  \n",
              "4        NaN        NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ac18068d-9586-40be-b8f8-73c2fde36646\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>v1</th>\n",
              "      <th>v2</th>\n",
              "      <th>Unnamed: 2</th>\n",
              "      <th>Unnamed: 3</th>\n",
              "      <th>Unnamed: 4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ham</td>\n",
              "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ham</td>\n",
              "      <td>Ok lar... Joking wif u oni...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>spam</td>\n",
              "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ham</td>\n",
              "      <td>U dun say so early hor... U c already then say...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ham</td>\n",
              "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ac18068d-9586-40be-b8f8-73c2fde36646')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ac18068d-9586-40be-b8f8-73c2fde36646 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ac18068d-9586-40be-b8f8-73c2fde36646');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "data=pd.read_csv(\"spam.csv\",encoding=\"latin\")\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "undefined-hurricane",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:12.082089Z",
          "iopub.status.busy": "2021-06-05T21:25:12.081425Z",
          "iopub.status.idle": "2021-06-05T21:25:12.084790Z",
          "shell.execute_reply": "2021-06-05T21:25:12.084386Z",
          "shell.execute_reply.started": "2021-06-05T13:11:05.122861Z"
        },
        "papermill": {
          "duration": 0.06044,
          "end_time": "2021-06-05T21:25:12.084894",
          "exception": false,
          "start_time": "2021-06-05T21:25:12.024454",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "undefined-hurricane",
        "outputId": "9f83a19d-831f-4343-fc7b-1056540d11e0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['v1', 'v2', 'Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "data.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "sixth-retention",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:12.294481Z",
          "iopub.status.busy": "2021-06-05T21:25:12.293839Z",
          "iopub.status.idle": "2021-06-05T21:25:12.296493Z",
          "shell.execute_reply": "2021-06-05T21:25:12.296065Z",
          "shell.execute_reply.started": "2021-06-05T13:11:15.588947Z"
        },
        "papermill": {
          "duration": 0.057838,
          "end_time": "2021-06-05T21:25:12.296599",
          "exception": false,
          "start_time": "2021-06-05T21:25:12.238761",
          "status": "completed"
        },
        "tags": [],
        "id": "sixth-retention"
      },
      "outputs": [],
      "source": [
        "data=data.drop(columns=[\"Unnamed: 2\",\"Unnamed: 3\",\"Unnamed: 4\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "least-grain",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:12.508435Z",
          "iopub.status.busy": "2021-06-05T21:25:12.507718Z",
          "iopub.status.idle": "2021-06-05T21:25:12.510320Z",
          "shell.execute_reply": "2021-06-05T21:25:12.509917Z",
          "shell.execute_reply.started": "2021-06-05T13:11:40.818878Z"
        },
        "papermill": {
          "duration": 0.059393,
          "end_time": "2021-06-05T21:25:12.510422",
          "exception": false,
          "start_time": "2021-06-05T21:25:12.451029",
          "status": "completed"
        },
        "tags": [],
        "id": "least-grain"
      },
      "outputs": [],
      "source": [
        "data=data.rename(\n",
        "{\n",
        "    \"v1\":\"Category\",\n",
        "    \"v2\":\"Message\"\n",
        "},\n",
        "    axis=1\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "physical-seeker",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:12.723276Z",
          "iopub.status.busy": "2021-06-05T21:25:12.722508Z",
          "iopub.status.idle": "2021-06-05T21:25:12.725995Z",
          "shell.execute_reply": "2021-06-05T21:25:12.725618Z",
          "shell.execute_reply.started": "2021-06-05T13:11:44.236258Z"
        },
        "papermill": {
          "duration": 0.061194,
          "end_time": "2021-06-05T21:25:12.726097",
          "exception": false,
          "start_time": "2021-06-05T21:25:12.664903",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "physical-seeker",
        "outputId": "1b20e846-e4a8-404b-954f-6c919923511a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Category                                            Message\n",
              "0      ham  Go until jurong point, crazy.. Available only ...\n",
              "1      ham                      Ok lar... Joking wif u oni...\n",
              "2     spam  Free entry in 2 a wkly comp to win FA Cup fina...\n",
              "3      ham  U dun say so early hor... U c already then say...\n",
              "4      ham  Nah I don't think he goes to usf, he lives aro..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7c263523-3594-44bc-9563-0df703629868\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Category</th>\n",
              "      <th>Message</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ham</td>\n",
              "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ham</td>\n",
              "      <td>Ok lar... Joking wif u oni...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>spam</td>\n",
              "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ham</td>\n",
              "      <td>U dun say so early hor... U c already then say...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ham</td>\n",
              "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7c263523-3594-44bc-9563-0df703629868')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7c263523-3594-44bc-9563-0df703629868 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7c263523-3594-44bc-9563-0df703629868');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "coated-survival",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:12.938251Z",
          "iopub.status.busy": "2021-06-05T21:25:12.937560Z",
          "iopub.status.idle": "2021-06-05T21:25:12.940893Z",
          "shell.execute_reply": "2021-06-05T21:25:12.940481Z",
          "shell.execute_reply.started": "2021-06-05T13:11:55.684078Z"
        },
        "papermill": {
          "duration": 0.060238,
          "end_time": "2021-06-05T21:25:12.940989",
          "exception": false,
          "start_time": "2021-06-05T21:25:12.880751",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "coated-survival",
        "outputId": "02611a98-c9cb-4b6d-ef68-43bcfed8825b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Category    0\n",
              "Message     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "data.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "retired-attendance",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:13.055606Z",
          "iopub.status.busy": "2021-06-05T21:25:13.054984Z",
          "iopub.status.idle": "2021-06-05T21:25:13.058827Z",
          "shell.execute_reply": "2021-06-05T21:25:13.059934Z",
          "shell.execute_reply.started": "2021-06-05T13:12:04.664694Z"
        },
        "papermill": {
          "duration": 0.066751,
          "end_time": "2021-06-05T21:25:13.060233",
          "exception": false,
          "start_time": "2021-06-05T21:25:12.993482",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "retired-attendance",
        "outputId": "d1cea397-cb19-4c37-c10d-ae7606c336a0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5572 entries, 0 to 5571\n",
            "Data columns (total 2 columns):\n",
            " #   Column    Non-Null Count  Dtype \n",
            "---  ------    --------------  ----- \n",
            " 0   Category  5572 non-null   object\n",
            " 1   Message   5572 non-null   object\n",
            "dtypes: object(2)\n",
            "memory usage: 87.2+ KB\n"
          ]
        }
      ],
      "source": [
        "data.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "id": "pursuant-creek",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:13.413348Z",
          "iopub.status.busy": "2021-06-05T21:25:13.412565Z",
          "iopub.status.idle": "2021-06-05T21:25:13.419876Z",
          "shell.execute_reply": "2021-06-05T21:25:13.420710Z",
          "shell.execute_reply.started": "2021-06-05T13:12:12.976048Z"
        },
        "papermill": {
          "duration": 0.09711,
          "end_time": "2021-06-05T21:25:13.420890",
          "exception": false,
          "start_time": "2021-06-05T21:25:13.323780",
          "status": "completed"
        },
        "tags": [],
        "id": "pursuant-creek"
      },
      "outputs": [],
      "source": [
        "data[\"Message Length\"]=data[\"Message\"].apply(len)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "id": "swiss-motor",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:13.709051Z",
          "iopub.status.busy": "2021-06-05T21:25:13.708305Z",
          "iopub.status.idle": "2021-06-05T21:25:14.293045Z",
          "shell.execute_reply": "2021-06-05T21:25:14.293459Z",
          "shell.execute_reply.started": "2021-06-05T13:13:28.317186Z"
        },
        "papermill": {
          "duration": 0.645822,
          "end_time": "2021-06-05T21:25:14.293613",
          "exception": false,
          "start_time": "2021-06-05T21:25:13.647791",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "swiss-motor",
        "outputId": "add90757-940e-4dd3-bad4-86d926c3794a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "fig=plt.figure(figsize=(12,8))\n",
        "sns.histplot(\n",
        "    x=data[\"Message Length\"],\n",
        "    hue=data[\"Category\"]\n",
        ")\n",
        "plt.title(\"ham & spam messege length comparision\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "heard-cream",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:14.511593Z",
          "iopub.status.busy": "2021-06-05T21:25:14.510783Z",
          "iopub.status.idle": "2021-06-05T21:25:14.522123Z",
          "shell.execute_reply": "2021-06-05T21:25:14.522538Z",
          "shell.execute_reply.started": "2021-06-05T13:14:04.524516Z"
        },
        "papermill": {
          "duration": 0.069945,
          "end_time": "2021-06-05T21:25:14.522668",
          "exception": false,
          "start_time": "2021-06-05T21:25:14.452723",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "heard-cream",
        "outputId": "87c3b294-7fd9-477a-e04e-bc1743b203d7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ham Messege Length Description:\n",
            " count    4825.000000\n",
            "mean       71.023627\n",
            "std        58.016023\n",
            "min         2.000000\n",
            "25%        33.000000\n",
            "50%        52.000000\n",
            "75%        92.000000\n",
            "max       910.000000\n",
            "Name: Message Length, dtype: float64\n",
            "************************************\n",
            "Spam Message Length Description:\n",
            " count    747.000000\n",
            "mean     138.866131\n",
            "std       29.183082\n",
            "min       13.000000\n",
            "25%      132.500000\n",
            "50%      149.000000\n",
            "75%      157.000000\n",
            "max      224.000000\n",
            "Name: Message Length, dtype: float64\n"
          ]
        }
      ],
      "source": [
        "ham_desc=data[data[\"Category\"]==\"ham\"][\"Message Length\"].describe()\n",
        "spam_desc=data[data[\"Category\"]==\"spam\"][\"Message Length\"].describe()\n",
        "\n",
        "print(\"Ham Messege Length Description:\\n\",ham_desc)\n",
        "print(\"************************************\")\n",
        "print(\"Spam Message Length Description:\\n\",spam_desc)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "diverse-fiber",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:14.747320Z",
          "iopub.status.busy": "2021-06-05T21:25:14.746546Z",
          "iopub.status.idle": "2021-06-05T21:25:14.759610Z",
          "shell.execute_reply": "2021-06-05T21:25:14.759991Z",
          "shell.execute_reply.started": "2021-06-05T13:18:23.141069Z"
        },
        "papermill": {
          "duration": 0.076687,
          "end_time": "2021-06-05T21:25:14.760115",
          "exception": false,
          "start_time": "2021-06-05T21:25:14.683428",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "diverse-fiber",
        "outputId": "6bbf5eb0-3011-4105-c9f5-546aee82b5b0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Category                 Message  Message Length\n",
              "count      5572                    5572     5572.000000\n",
              "unique        2                    5169             NaN\n",
              "top         ham  Sorry, I'll call later             NaN\n",
              "freq       4825                      30             NaN\n",
              "mean        NaN                     NaN       80.118808\n",
              "std         NaN                     NaN       59.690841\n",
              "min         NaN                     NaN        2.000000\n",
              "25%         NaN                     NaN       36.000000\n",
              "50%         NaN                     NaN       61.000000\n",
              "75%         NaN                     NaN      121.000000\n",
              "max         NaN                     NaN      910.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-03885d49-234f-4974-bda0-4d1e02c2f0ba\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Category</th>\n",
              "      <th>Message</th>\n",
              "      <th>Message Length</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5572</td>\n",
              "      <td>5572</td>\n",
              "      <td>5572.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>2</td>\n",
              "      <td>5169</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>ham</td>\n",
              "      <td>Sorry, I'll call later</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>4825</td>\n",
              "      <td>30</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>80.118808</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>59.690841</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>36.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>61.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>121.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>910.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03885d49-234f-4974-bda0-4d1e02c2f0ba')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-03885d49-234f-4974-bda0-4d1e02c2f0ba button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-03885d49-234f-4974-bda0-4d1e02c2f0ba');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "data.describe(include=\"all\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "ecological-delta",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:14.981084Z",
          "iopub.status.busy": "2021-06-05T21:25:14.980381Z",
          "iopub.status.idle": "2021-06-05T21:25:14.983486Z",
          "shell.execute_reply": "2021-06-05T21:25:14.983902Z",
          "shell.execute_reply.started": "2021-06-05T13:18:35.459714Z"
        },
        "papermill": {
          "duration": 0.062941,
          "end_time": "2021-06-05T21:25:14.984013",
          "exception": false,
          "start_time": "2021-06-05T21:25:14.921072",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ecological-delta",
        "outputId": "4e068603-729e-4662-cf4e-f125aeab7d96"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ham     4825\n",
              "spam     747\n",
              "Name: Category, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "data[\"Category\"].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "accepted-appendix",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:15.212444Z",
          "iopub.status.busy": "2021-06-05T21:25:15.211621Z",
          "iopub.status.idle": "2021-06-05T21:25:15.299203Z",
          "shell.execute_reply": "2021-06-05T21:25:15.299607Z",
          "shell.execute_reply.started": "2021-06-05T13:19:55.442786Z"
        },
        "papermill": {
          "duration": 0.152368,
          "end_time": "2021-06-05T21:25:15.299750",
          "exception": false,
          "start_time": "2021-06-05T21:25:15.147382",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "accepted-appendix",
        "outputId": "16173ad0-082b-49f7-e53f-bfc08ba53acd"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.countplot(\n",
        "    data=data,\n",
        "    x=\"Category\"\n",
        ")\n",
        "plt.title(\"ham vs spam\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "received-motor",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:15.528919Z",
          "iopub.status.busy": "2021-06-05T21:25:15.528293Z",
          "iopub.status.idle": "2021-06-05T21:25:15.532031Z",
          "shell.execute_reply": "2021-06-05T21:25:15.532623Z",
          "shell.execute_reply.started": "2021-06-05T13:20:13.724949Z"
        },
        "papermill": {
          "duration": 0.068271,
          "end_time": "2021-06-05T21:25:15.532813",
          "exception": false,
          "start_time": "2021-06-05T21:25:15.464542",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "received-motor",
        "outputId": "6e8e6a11-94de-48ba-c2b0-25bd4f3b6283"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ham contains:86.59% of total data.\n",
            "Spam contains:13.41% of total data.\n"
          ]
        }
      ],
      "source": [
        "ham_count=data[\"Category\"].value_counts()[0]\n",
        "spam_count=data[\"Category\"].value_counts()[1]\n",
        "\n",
        "total_count=data.shape[0]\n",
        "\n",
        "print(\"Ham contains:{:.2f}% of total data.\".format(ham_count/total_count*100))\n",
        "print(\"Spam contains:{:.2f}% of total data.\".format(spam_count/total_count*100))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "id": "touched-priest",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:15.762094Z",
          "iopub.status.busy": "2021-06-05T21:25:15.761361Z",
          "iopub.status.idle": "2021-06-05T21:25:15.770749Z",
          "shell.execute_reply": "2021-06-05T21:25:15.771192Z",
          "shell.execute_reply.started": "2021-06-05T13:22:20.729748Z"
        },
        "papermill": {
          "duration": 0.070925,
          "end_time": "2021-06-05T21:25:15.771314",
          "exception": false,
          "start_time": "2021-06-05T21:25:15.700389",
          "status": "completed"
        },
        "tags": [],
        "id": "touched-priest"
      },
      "outputs": [],
      "source": [
        "#compute the length of majority & minority class\n",
        "minority_len=len(data[data[\"Category\"]==\"spam\"])\n",
        "majority_len=len(data[data[\"Category\"]==\"ham\"])\n",
        "\n",
        "#store the indices of majority and minority class\n",
        "minority_indices=data[data[\"Category\"]==\"spam\"].index\n",
        "majority_indices=data[data[\"Category\"]==\"ham\"].index\n",
        "\n",
        "#generate new majority indices from the total majority_indices\n",
        "#with size equal to minority class length so we obtain equivalent number of indices length\n",
        "random_majority_indices=np.random.choice(\n",
        "    majority_indices,\n",
        "    size=minority_len,\n",
        "    replace=False\n",
        ")\n",
        "\n",
        "#concatenate the two indices to obtain indices of new dataframe\n",
        "undersampled_indices=np.concatenate([minority_indices,random_majority_indices])\n",
        "\n",
        "#create df using new indices\n",
        "df=data.loc[undersampled_indices]\n",
        "\n",
        "#shuffle the sample\n",
        "df=df.sample(frac=1)\n",
        "\n",
        "#reset the index as its all mixed\n",
        "df=df.reset_index()\n",
        "\n",
        "#drop the older index\n",
        "df=df.drop(\n",
        "    columns=[\"index\"],\n",
        ")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "desperate-tension",
      "metadata": {
        "papermill": {
          "duration": 0.054515,
          "end_time": "2021-06-05T21:25:15.880512",
          "exception": false,
          "start_time": "2021-06-05T21:25:15.825997",
          "status": "completed"
        },
        "tags": [],
        "id": "desperate-tension"
      },
      "source": [
        "The resulting dataframes have **1494** rows and **4** columns "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "id": "deadly-sarah",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:15.994340Z",
          "iopub.status.busy": "2021-06-05T21:25:15.993657Z",
          "iopub.status.idle": "2021-06-05T21:25:15.997035Z",
          "shell.execute_reply": "2021-06-05T21:25:15.996648Z",
          "shell.execute_reply.started": "2021-06-05T13:45:13.232181Z"
        },
        "papermill": {
          "duration": 0.061621,
          "end_time": "2021-06-05T21:25:15.997136",
          "exception": false,
          "start_time": "2021-06-05T21:25:15.935515",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "deadly-sarah",
        "outputId": "cf85c118-1426-4246-9987-6b8c5fa38c68"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1494, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "id": "living-concrete",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:16.223504Z",
          "iopub.status.busy": "2021-06-05T21:25:16.222762Z",
          "iopub.status.idle": "2021-06-05T21:25:16.225962Z",
          "shell.execute_reply": "2021-06-05T21:25:16.226471Z",
          "shell.execute_reply.started": "2021-06-05T13:46:09.002215Z"
        },
        "papermill": {
          "duration": 0.064349,
          "end_time": "2021-06-05T21:25:16.226598",
          "exception": false,
          "start_time": "2021-06-05T21:25:16.162249",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "living-concrete",
        "outputId": "0d6ba360-b4f9-4a9a-a4f3-7356ed23e1e2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "spam    747\n",
              "ham     747\n",
              "Name: Category, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "df[\"Category\"].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "id": "involved-regression",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:16.455211Z",
          "iopub.status.busy": "2021-06-05T21:25:16.454394Z",
          "iopub.status.idle": "2021-06-05T21:25:16.547373Z",
          "shell.execute_reply": "2021-06-05T21:25:16.546959Z",
          "shell.execute_reply.started": "2021-06-05T13:45:38.64708Z"
        },
        "papermill": {
          "duration": 0.154739,
          "end_time": "2021-06-05T21:25:16.547478",
          "exception": false,
          "start_time": "2021-06-05T21:25:16.392739",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "involved-regression",
        "outputId": "a530d09d-dc10-4aa5-adc9-fb5803fc519a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.countplot(\n",
        "    data=df,\n",
        "    x=\"Category\"\n",
        ")\n",
        "plt.title(\"ham vs spam\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "logical-hepatitis",
      "metadata": {
        "papermill": {
          "duration": 0.055485,
          "end_time": "2021-06-05T21:25:16.659061",
          "exception": false,
          "start_time": "2021-06-05T21:25:16.603576",
          "status": "completed"
        },
        "tags": [],
        "id": "logical-hepatitis"
      },
      "source": [
        "Display the head of new **df**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "id": "confidential-tuning",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:16.779631Z",
          "iopub.status.busy": "2021-06-05T21:25:16.778901Z",
          "iopub.status.idle": "2021-06-05T21:25:16.781973Z",
          "shell.execute_reply": "2021-06-05T21:25:16.782497Z",
          "shell.execute_reply.started": "2021-06-05T13:22:33.46429Z"
        },
        "papermill": {
          "duration": 0.066354,
          "end_time": "2021-06-05T21:25:16.782617",
          "exception": false,
          "start_time": "2021-06-05T21:25:16.716263",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "confidential-tuning",
        "outputId": "da00a408-69a8-4a3b-e7d5-75a7490aca46"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Category                                            Message  Message Length\n",
              "0     spam  Congratulations ur awarded either å£500 of CD ...             152\n",
              "1     spam  Congratulations - Thanks to a good friend U ha...             158\n",
              "2      ham           You sure your neighbors didnt pick it up              40\n",
              "3     spam  Urgent UR awarded a complimentary trip to Euro...             161\n",
              "4      ham  In xam hall boy asked girl Tell me the startin...             185"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8cf9b90a-a51a-4336-ad22-6cda3f8538de\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Category</th>\n",
              "      <th>Message</th>\n",
              "      <th>Message Length</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>spam</td>\n",
              "      <td>Congratulations ur awarded either å£500 of CD ...</td>\n",
              "      <td>152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>spam</td>\n",
              "      <td>Congratulations - Thanks to a good friend U ha...</td>\n",
              "      <td>158</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ham</td>\n",
              "      <td>You sure your neighbors didnt pick it up</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>spam</td>\n",
              "      <td>Urgent UR awarded a complimentary trip to Euro...</td>\n",
              "      <td>161</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ham</td>\n",
              "      <td>In xam hall boy asked girl Tell me the startin...</td>\n",
              "      <td>185</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8cf9b90a-a51a-4336-ad22-6cda3f8538de')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8cf9b90a-a51a-4336-ad22-6cda3f8538de button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8cf9b90a-a51a-4336-ad22-6cda3f8538de');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "superb-variance",
      "metadata": {
        "papermill": {
          "duration": 0.055989,
          "end_time": "2021-06-05T21:25:16.894516",
          "exception": false,
          "start_time": "2021-06-05T21:25:16.838527",
          "status": "completed"
        },
        "tags": [],
        "id": "superb-variance"
      },
      "source": [
        "Created new column **Label** and encode **ham** as **0** and **spam** as **1**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "id": "characteristic-gilbert",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:17.012063Z",
          "iopub.status.busy": "2021-06-05T21:25:17.011386Z",
          "iopub.status.idle": "2021-06-05T21:25:17.013754Z",
          "shell.execute_reply": "2021-06-05T21:25:17.014107Z",
          "shell.execute_reply.started": "2021-06-05T13:22:50.526929Z"
        },
        "papermill": {
          "duration": 0.063462,
          "end_time": "2021-06-05T21:25:17.014239",
          "exception": false,
          "start_time": "2021-06-05T21:25:16.950777",
          "status": "completed"
        },
        "tags": [],
        "id": "characteristic-gilbert"
      },
      "outputs": [],
      "source": [
        "df[\"Label\"]=df[\"Category\"].map(\n",
        "    {\n",
        "        \"ham\":0,\n",
        "        \"spam\":1\n",
        "    }\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "id": "valued-conviction",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:17.245986Z",
          "iopub.status.busy": "2021-06-05T21:25:17.245183Z",
          "iopub.status.idle": "2021-06-05T21:25:17.248751Z",
          "shell.execute_reply": "2021-06-05T21:25:17.248371Z",
          "shell.execute_reply.started": "2021-06-05T13:22:54.881065Z"
        },
        "papermill": {
          "duration": 0.066808,
          "end_time": "2021-06-05T21:25:17.248850",
          "exception": false,
          "start_time": "2021-06-05T21:25:17.182042",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "valued-conviction",
        "outputId": "53cb9e1e-4357-4637-fc4d-58d329036d19"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Category                                            Message  Message Length  \\\n",
              "0     spam  Congratulations ur awarded either å£500 of CD ...             152   \n",
              "1     spam  Congratulations - Thanks to a good friend U ha...             158   \n",
              "2      ham           You sure your neighbors didnt pick it up              40   \n",
              "3     spam  Urgent UR awarded a complimentary trip to Euro...             161   \n",
              "4      ham  In xam hall boy asked girl Tell me the startin...             185   \n",
              "\n",
              "   Label  \n",
              "0      1  \n",
              "1      1  \n",
              "2      0  \n",
              "3      1  \n",
              "4      0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-17e64ee6-69bf-4721-9012-4bfd1028f7af\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Category</th>\n",
              "      <th>Message</th>\n",
              "      <th>Message Length</th>\n",
              "      <th>Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>spam</td>\n",
              "      <td>Congratulations ur awarded either å£500 of CD ...</td>\n",
              "      <td>152</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>spam</td>\n",
              "      <td>Congratulations - Thanks to a good friend U ha...</td>\n",
              "      <td>158</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ham</td>\n",
              "      <td>You sure your neighbors didnt pick it up</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>spam</td>\n",
              "      <td>Urgent UR awarded a complimentary trip to Euro...</td>\n",
              "      <td>161</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ham</td>\n",
              "      <td>In xam hall boy asked girl Tell me the startin...</td>\n",
              "      <td>185</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17e64ee6-69bf-4721-9012-4bfd1028f7af')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-17e64ee6-69bf-4721-9012-4bfd1028f7af button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-17e64ee6-69bf-4721-9012-4bfd1028f7af');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "exposed-terry",
      "metadata": {
        "papermill": {
          "duration": 0.056052,
          "end_time": "2021-06-05T21:25:17.361538",
          "exception": false,
          "start_time": "2021-06-05T21:25:17.305486",
          "status": "completed"
        },
        "tags": [],
        "id": "exposed-terry"
      },
      "source": [
        "Import libraries to perform word **tokenization**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "id": "narrow-morocco",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:17.478450Z",
          "iopub.status.busy": "2021-06-05T21:25:17.477820Z",
          "iopub.status.idle": "2021-06-05T21:25:18.196909Z",
          "shell.execute_reply": "2021-06-05T21:25:18.195818Z",
          "shell.execute_reply.started": "2021-06-05T13:24:48.92605Z"
        },
        "papermill": {
          "duration": 0.778701,
          "end_time": "2021-06-05T21:25:18.197053",
          "exception": false,
          "start_time": "2021-06-05T21:25:17.418352",
          "status": "completed"
        },
        "tags": [],
        "id": "narrow-morocco"
      },
      "outputs": [],
      "source": [
        "\n",
        "stemmer=PorterStemmer()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "id": "veterinary-attitude",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:18.429770Z",
          "iopub.status.busy": "2021-06-05T21:25:18.429129Z",
          "iopub.status.idle": "2021-06-05T21:25:21.956257Z",
          "shell.execute_reply": "2021-06-05T21:25:21.955322Z",
          "shell.execute_reply.started": "2021-06-05T13:24:53.086063Z"
        },
        "papermill": {
          "duration": 3.589362,
          "end_time": "2021-06-05T21:25:21.956416",
          "exception": false,
          "start_time": "2021-06-05T21:25:18.367054",
          "status": "completed"
        },
        "tags": [],
        "id": "veterinary-attitude"
      },
      "outputs": [],
      "source": [
        "#declare empty list to store tokenized message\n",
        "corpus=[]\n",
        "\n",
        "#iterate through the df[\"Message\"]\n",
        "for message in df[\"Message\"]:\n",
        "    \n",
        "    #replace every special characters, numbers etc.. with whitespace of message\n",
        "    #It will help retain only letter/alphabets\n",
        "    message=re.sub(\"[^a-zA-Z]\",\" \",message)\n",
        "    \n",
        "    #convert every letters to its lowercase\n",
        "    message=message.lower()\n",
        "    \n",
        "    #split the word into individual word list\n",
        "    message=message.split()\n",
        "    \n",
        "    #perform stemming using PorterStemmer for all non-english-stopwords\n",
        "    message=[stemmer.stem(words)\n",
        "            for words in message\n",
        "             if words not in set(stopwords.words(\"english\"))\n",
        "            ]\n",
        "    #join the word lists with the whitespace\n",
        "    message=\" \".join(message)\n",
        "    \n",
        "    #append the message in corpus list\n",
        "    corpus.append(message)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "id": "deadly-highland",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:22.349026Z",
          "iopub.status.busy": "2021-06-05T21:25:22.348400Z",
          "iopub.status.idle": "2021-06-05T21:25:26.991671Z",
          "shell.execute_reply": "2021-06-05T21:25:26.991111Z",
          "shell.execute_reply.started": "2021-06-05T13:24:59.704344Z"
        },
        "papermill": {
          "duration": 4.708528,
          "end_time": "2021-06-05T21:25:26.991797",
          "exception": false,
          "start_time": "2021-06-05T21:25:22.283269",
          "status": "completed"
        },
        "tags": [],
        "id": "deadly-highland"
      },
      "outputs": [],
      "source": [
        "\n",
        "vocab_size=10000\n",
        "\n",
        "oneHot_doc=[one_hot(words,n=vocab_size)\n",
        "           for words in corpus\n",
        "           ]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "id": "annual-classics",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:27.230551Z",
          "iopub.status.busy": "2021-06-05T21:25:27.226608Z",
          "iopub.status.idle": "2021-06-05T21:25:27.234929Z",
          "shell.execute_reply": "2021-06-05T21:25:27.235311Z",
          "shell.execute_reply.started": "2021-06-05T13:25:04.880759Z"
        },
        "papermill": {
          "duration": 0.070744,
          "end_time": "2021-06-05T21:25:27.235440",
          "exception": false,
          "start_time": "2021-06-05T21:25:27.164696",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "annual-classics",
        "outputId": "e11e35f3-23bb-438a-aa2a-4d114fc00dbc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    1494.000000\n",
              "mean      104.014726\n",
              "std        56.243274\n",
              "min         2.000000\n",
              "25%        49.000000\n",
              "50%       118.000000\n",
              "75%       153.000000\n",
              "max       588.000000\n",
              "Name: Message Length, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "df[\"Message Length\"].describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "id": "greatest-brake",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:27.491933Z",
          "iopub.status.busy": "2021-06-05T21:25:27.472593Z",
          "iopub.status.idle": "2021-06-05T21:25:27.657633Z",
          "shell.execute_reply": "2021-06-05T21:25:27.658040Z",
          "shell.execute_reply.started": "2021-06-05T13:25:10.488048Z"
        },
        "papermill": {
          "duration": 0.251426,
          "end_time": "2021-06-05T21:25:27.658177",
          "exception": false,
          "start_time": "2021-06-05T21:25:27.406751",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "greatest-brake",
        "outputId": "d901c012-6db4-4f37-e109-b664e4dc3125"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "fig=plt.figure(figsize=(12,8))\n",
        "sns.kdeplot(\n",
        "    x=df[\"Message Length\"],\n",
        "    hue=df[\"Category\"]\n",
        ")\n",
        "plt.title(\"ham & spam messege length comparision\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "id": "looking-merit",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:27.903045Z",
          "iopub.status.busy": "2021-06-05T21:25:27.894362Z",
          "iopub.status.idle": "2021-06-05T21:25:27.914696Z",
          "shell.execute_reply": "2021-06-05T21:25:27.915084Z",
          "shell.execute_reply.started": "2021-06-05T13:25:53.93613Z"
        },
        "papermill": {
          "duration": 0.083177,
          "end_time": "2021-06-05T21:25:27.915250",
          "exception": false,
          "start_time": "2021-06-05T21:25:27.832073",
          "status": "completed"
        },
        "tags": [],
        "id": "looking-merit"
      },
      "outputs": [],
      "source": [
        "\n",
        "sentence_len=200\n",
        "embedded_doc=pad_sequences(\n",
        "    oneHot_doc,\n",
        "    maxlen=sentence_len,\n",
        "    padding=\"pre\"\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "id": "material-specification",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:28.150459Z",
          "iopub.status.busy": "2021-06-05T21:25:28.149901Z",
          "iopub.status.idle": "2021-06-05T21:25:28.153805Z",
          "shell.execute_reply": "2021-06-05T21:25:28.153382Z",
          "shell.execute_reply.started": "2021-06-05T13:26:02.468521Z"
        },
        "papermill": {
          "duration": 0.065264,
          "end_time": "2021-06-05T21:25:28.153904",
          "exception": false,
          "start_time": "2021-06-05T21:25:28.088640",
          "status": "completed"
        },
        "tags": [],
        "id": "material-specification"
      },
      "outputs": [],
      "source": [
        "extract_features=pd.DataFrame(\n",
        "    data=embedded_doc\n",
        ")\n",
        "target=df[\"Label\"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "id": "chubby-implementation",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:28.390204Z",
          "iopub.status.busy": "2021-06-05T21:25:28.389283Z",
          "iopub.status.idle": "2021-06-05T21:25:28.393454Z",
          "shell.execute_reply": "2021-06-05T21:25:28.393026Z",
          "shell.execute_reply.started": "2021-06-05T13:26:06.740192Z"
        },
        "papermill": {
          "duration": 0.065946,
          "end_time": "2021-06-05T21:25:28.393554",
          "exception": false,
          "start_time": "2021-06-05T21:25:28.327608",
          "status": "completed"
        },
        "tags": [],
        "id": "chubby-implementation"
      },
      "outputs": [],
      "source": [
        "df_final=pd.concat([extract_features,target],axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "id": "flying-salvation",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:28.640856Z",
          "iopub.status.busy": "2021-06-05T21:25:28.634468Z",
          "iopub.status.idle": "2021-06-05T21:25:28.645666Z",
          "shell.execute_reply": "2021-06-05T21:25:28.646060Z",
          "shell.execute_reply.started": "2021-06-05T13:26:09.554818Z"
        },
        "papermill": {
          "duration": 0.078954,
          "end_time": "2021-06-05T21:25:28.646188",
          "exception": false,
          "start_time": "2021-06-05T21:25:28.567234",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "flying-salvation",
        "outputId": "96d23589-1658-429a-87cb-3508f7718833"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   0  1  2  3  4  5  6  7  8  9  ...   191   192   193   194   195   196  \\\n",
              "0  0  0  0  0  0  0  0  0  0  0  ...  3170  4545  4392  5141  6489  5186   \n",
              "1  0  0  0  0  0  0  0  0  0  0  ...  6586  3423  1639  8826  3416  1739   \n",
              "2  0  0  0  0  0  0  0  0  0  0  ...     0     0     0     0     0  5964   \n",
              "3  0  0  0  0  0  0  0  0  0  0  ...  2505  3969  6586  3170  5152  7631   \n",
              "4  0  0  0  0  0  0  0  0  0  0  ...  8116  4652  1586  9705  8789  6633   \n",
              "\n",
              "    197   198   199  Label  \n",
              "0  1607  4335  3753      1  \n",
              "1  3443  9175  9588      1  \n",
              "2  1401  4951  9927      0  \n",
              "3  3266  3294  4399      1  \n",
              "4  8781  4430  3873      0  \n",
              "\n",
              "[5 rows x 201 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f2a0ca5e-d310-47cb-9e08-ec4d8c7b21f9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>191</th>\n",
              "      <th>192</th>\n",
              "      <th>193</th>\n",
              "      <th>194</th>\n",
              "      <th>195</th>\n",
              "      <th>196</th>\n",
              "      <th>197</th>\n",
              "      <th>198</th>\n",
              "      <th>199</th>\n",
              "      <th>Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>3170</td>\n",
              "      <td>4545</td>\n",
              "      <td>4392</td>\n",
              "      <td>5141</td>\n",
              "      <td>6489</td>\n",
              "      <td>5186</td>\n",
              "      <td>1607</td>\n",
              "      <td>4335</td>\n",
              "      <td>3753</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>6586</td>\n",
              "      <td>3423</td>\n",
              "      <td>1639</td>\n",
              "      <td>8826</td>\n",
              "      <td>3416</td>\n",
              "      <td>1739</td>\n",
              "      <td>3443</td>\n",
              "      <td>9175</td>\n",
              "      <td>9588</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5964</td>\n",
              "      <td>1401</td>\n",
              "      <td>4951</td>\n",
              "      <td>9927</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2505</td>\n",
              "      <td>3969</td>\n",
              "      <td>6586</td>\n",
              "      <td>3170</td>\n",
              "      <td>5152</td>\n",
              "      <td>7631</td>\n",
              "      <td>3266</td>\n",
              "      <td>3294</td>\n",
              "      <td>4399</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8116</td>\n",
              "      <td>4652</td>\n",
              "      <td>1586</td>\n",
              "      <td>9705</td>\n",
              "      <td>8789</td>\n",
              "      <td>6633</td>\n",
              "      <td>8781</td>\n",
              "      <td>4430</td>\n",
              "      <td>3873</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 201 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2a0ca5e-d310-47cb-9e08-ec4d8c7b21f9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f2a0ca5e-d310-47cb-9e08-ec4d8c7b21f9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f2a0ca5e-d310-47cb-9e08-ec4d8c7b21f9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "df_final.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "id": "successful-medicine",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:28.886071Z",
          "iopub.status.busy": "2021-06-05T21:25:28.885371Z",
          "iopub.status.idle": "2021-06-05T21:25:28.887561Z",
          "shell.execute_reply": "2021-06-05T21:25:28.887908Z",
          "shell.execute_reply.started": "2021-06-05T13:27:37.352174Z"
        },
        "papermill": {
          "duration": 0.065479,
          "end_time": "2021-06-05T21:25:28.888024",
          "exception": false,
          "start_time": "2021-06-05T21:25:28.822545",
          "status": "completed"
        },
        "tags": [],
        "id": "successful-medicine"
      },
      "outputs": [],
      "source": [
        "X=df_final.drop(\"Label\",axis=1)\n",
        "y=df_final[\"Label\"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "id": "interstate-plane",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:29.366550Z",
          "iopub.status.busy": "2021-06-05T21:25:29.365920Z",
          "iopub.status.idle": "2021-06-05T21:25:29.369112Z",
          "shell.execute_reply": "2021-06-05T21:25:29.368678Z",
          "shell.execute_reply.started": "2021-06-05T13:28:45.283286Z"
        },
        "papermill": {
          "duration": 0.067239,
          "end_time": "2021-06-05T21:25:29.369246",
          "exception": false,
          "start_time": "2021-06-05T21:25:29.302007",
          "status": "completed"
        },
        "tags": [],
        "id": "interstate-plane"
      },
      "outputs": [],
      "source": [
        "X_trainval,X_test,y_trainval,y_test=train_test_split(\n",
        "    X,\n",
        "    y,\n",
        "    random_state=42,\n",
        "    test_size=0.15\n",
        ")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "id": "freelance-methodology",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:29.607857Z",
          "iopub.status.busy": "2021-06-05T21:25:29.607083Z",
          "iopub.status.idle": "2021-06-05T21:25:29.611792Z",
          "shell.execute_reply": "2021-06-05T21:25:29.611303Z",
          "shell.execute_reply.started": "2021-06-05T13:29:35.6349Z"
        },
        "papermill": {
          "duration": 0.067016,
          "end_time": "2021-06-05T21:25:29.611890",
          "exception": false,
          "start_time": "2021-06-05T21:25:29.544874",
          "status": "completed"
        },
        "tags": [],
        "id": "freelance-methodology"
      },
      "outputs": [],
      "source": [
        "X_train,X_val,y_train,y_val=train_test_split(\n",
        "    X_trainval,\n",
        "    y_trainval,\n",
        "    random_state=42,\n",
        "    test_size=0.15\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "id": "velvet-victor",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:30.090523Z",
          "iopub.status.busy": "2021-06-05T21:25:30.090004Z",
          "iopub.status.idle": "2021-06-05T21:25:32.080428Z",
          "shell.execute_reply": "2021-06-05T21:25:32.079914Z",
          "shell.execute_reply.started": "2021-06-05T13:29:53.107847Z"
        },
        "papermill": {
          "duration": 2.05221,
          "end_time": "2021-06-05T21:25:32.080571",
          "exception": false,
          "start_time": "2021-06-05T21:25:30.028361",
          "status": "completed"
        },
        "tags": [],
        "id": "velvet-victor"
      },
      "outputs": [],
      "source": [
        "model=Sequential()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "id": "cellular-scott",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:32.328114Z",
          "iopub.status.busy": "2021-06-05T21:25:32.327477Z",
          "iopub.status.idle": "2021-06-05T21:25:32.614126Z",
          "shell.execute_reply": "2021-06-05T21:25:32.613674Z",
          "shell.execute_reply.started": "2021-06-05T13:30:45.466027Z"
        },
        "papermill": {
          "duration": 0.35371,
          "end_time": "2021-06-05T21:25:32.614275",
          "exception": false,
          "start_time": "2021-06-05T21:25:32.260565",
          "status": "completed"
        },
        "tags": [],
        "id": "cellular-scott"
      },
      "outputs": [],
      "source": [
        "feature_num=100\n",
        "model.add(\n",
        "    Embedding(\n",
        "        input_dim=vocab_size,\n",
        "        output_dim=feature_num,\n",
        "        input_length=sentence_len\n",
        "    )\n",
        ")\n",
        "model.add(\n",
        "    LSTM(\n",
        "    units=128\n",
        "    )\n",
        ")\n",
        "\n",
        "model.add(\n",
        "    Dense(\n",
        "        units=1,\n",
        "        activation=\"sigmoid\"\n",
        "    )\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "id": "million-glenn",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:32.858991Z",
          "iopub.status.busy": "2021-06-05T21:25:32.858210Z",
          "iopub.status.idle": "2021-06-05T21:25:32.864494Z",
          "shell.execute_reply": "2021-06-05T21:25:32.864088Z",
          "shell.execute_reply.started": "2021-06-05T13:31:04.94228Z"
        },
        "papermill": {
          "duration": 0.073967,
          "end_time": "2021-06-05T21:25:32.864598",
          "exception": false,
          "start_time": "2021-06-05T21:25:32.790631",
          "status": "completed"
        },
        "tags": [],
        "id": "million-glenn"
      },
      "outputs": [],
      "source": [
        "\n",
        "model.compile(\n",
        "    optimizer=Adam(\n",
        "    learning_rate=0.001\n",
        "    ),\n",
        "    loss=\"binary_crossentropy\",\n",
        "    metrics=[\"accuracy\"]\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "id": "upper-virtue",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:33.101504Z",
          "iopub.status.busy": "2021-06-05T21:25:33.100901Z",
          "iopub.status.idle": "2021-06-05T21:25:44.783932Z",
          "shell.execute_reply": "2021-06-05T21:25:44.784363Z",
          "shell.execute_reply.started": "2021-06-05T13:31:08.678125Z"
        },
        "papermill": {
          "duration": 11.745174,
          "end_time": "2021-06-05T21:25:44.784523",
          "exception": false,
          "start_time": "2021-06-05T21:25:33.039349",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "upper-virtue",
        "outputId": "9ea29223-a0d4-49d7-c088-a852ffaaa791"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "34/34 [==============================] - 24s 532ms/step - loss: 0.4982 - accuracy: 0.7987 - val_loss: 0.2507 - val_accuracy: 0.9058\n",
            "Epoch 2/10\n",
            "34/34 [==============================] - 12s 348ms/step - loss: 0.1531 - accuracy: 0.9518 - val_loss: 0.0826 - val_accuracy: 0.9843\n",
            "Epoch 3/10\n",
            "34/34 [==============================] - 13s 386ms/step - loss: 0.0559 - accuracy: 0.9824 - val_loss: 0.0450 - val_accuracy: 0.9791\n",
            "Epoch 4/10\n",
            "34/34 [==============================] - 12s 343ms/step - loss: 0.0259 - accuracy: 0.9926 - val_loss: 0.0970 - val_accuracy: 0.9634\n",
            "Epoch 5/10\n",
            "34/34 [==============================] - 12s 343ms/step - loss: 0.0139 - accuracy: 0.9972 - val_loss: 0.0491 - val_accuracy: 0.9791\n",
            "Epoch 6/10\n",
            "34/34 [==============================] - 12s 341ms/step - loss: 0.0085 - accuracy: 0.9981 - val_loss: 0.0863 - val_accuracy: 0.9738\n",
            "Epoch 7/10\n",
            "34/34 [==============================] - 12s 340ms/step - loss: 0.0123 - accuracy: 0.9963 - val_loss: 0.0528 - val_accuracy: 0.9738\n",
            "Epoch 8/10\n",
            "34/34 [==============================] - 13s 384ms/step - loss: 0.0062 - accuracy: 0.9991 - val_loss: 0.1202 - val_accuracy: 0.9686\n",
            "Epoch 9/10\n",
            "34/34 [==============================] - 14s 412ms/step - loss: 0.0159 - accuracy: 0.9981 - val_loss: 0.0561 - val_accuracy: 0.9738\n",
            "Epoch 10/10\n",
            "34/34 [==============================] - 11s 337ms/step - loss: 0.0038 - accuracy: 0.9991 - val_loss: 0.0798 - val_accuracy: 0.9791\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f5d53dc9b90>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ],
      "source": [
        "model.fit(\n",
        "    X_train,\n",
        "    y_train,\n",
        "    validation_data=(\n",
        "        X_val,\n",
        "        y_val\n",
        "    ),\n",
        "    epochs=10\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "id": "catholic-backup",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:45.181887Z",
          "iopub.status.busy": "2021-06-05T21:25:45.181034Z",
          "iopub.status.idle": "2021-06-05T21:25:45.554564Z",
          "shell.execute_reply": "2021-06-05T21:25:45.554046Z",
          "shell.execute_reply.started": "2021-06-05T13:31:46.530667Z"
        },
        "papermill": {
          "duration": 0.485467,
          "end_time": "2021-06-05T21:25:45.554702",
          "exception": false,
          "start_time": "2021-06-05T21:25:45.069235",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "catholic-backup",
        "outputId": "c2366105-4edf-4b0f-ef72-0b22f4546951"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8/8 [==============================] - 1s 93ms/step\n"
          ]
        }
      ],
      "source": [
        "y_pred=model.predict(X_test)\n",
        "y_pred=(y_pred>0.5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "id": "choice-bibliography",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:46.493305Z",
          "iopub.status.busy": "2021-06-05T21:25:46.490778Z",
          "iopub.status.idle": "2021-06-05T21:25:46.496012Z",
          "shell.execute_reply": "2021-06-05T21:25:46.495356Z",
          "shell.execute_reply.started": "2021-06-05T13:32:06.090078Z"
        },
        "papermill": {
          "duration": 0.165762,
          "end_time": "2021-06-05T21:25:46.496190",
          "exception": false,
          "start_time": "2021-06-05T21:25:46.330428",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "choice-bibliography",
        "outputId": "7bc2a1f8-92ce-4568-b94b-e4e888940e66"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Score:95.56%\n"
          ]
        }
      ],
      "source": [
        "score=accuracy_score(y_test,y_pred)\n",
        "print(\"Test Score:{:.2f}%\".format(score*100))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "id": "consolidated-population",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:47.002186Z",
          "iopub.status.busy": "2021-06-05T21:25:46.971098Z",
          "iopub.status.idle": "2021-06-05T21:25:47.201829Z",
          "shell.execute_reply": "2021-06-05T21:25:47.200997Z",
          "shell.execute_reply.started": "2021-06-05T13:50:04.410666Z"
        },
        "papermill": {
          "duration": 0.338907,
          "end_time": "2021-06-05T21:25:47.201968",
          "exception": false,
          "start_time": "2021-06-05T21:25:46.863061",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 534
        },
        "id": "consolidated-population",
        "outputId": "ed3a6baf-5b87-4913-dc19-b3e28500ea36"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[103,   5],\n",
              "       [  5, 112]])"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x576 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "cm=confusion_matrix(y_test,y_pred)\n",
        "fig=plt.figure(figsize=(12,8))\n",
        "sns.heatmap(\n",
        "    cm,\n",
        "    annot=True,\n",
        ")\n",
        "plt.title(\"Confusion Matrix\")\n",
        "cm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "id": "forty-strike",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:47.590878Z",
          "iopub.status.busy": "2021-06-05T21:25:47.589564Z",
          "iopub.status.idle": "2021-06-05T21:25:47.591961Z",
          "shell.execute_reply": "2021-06-05T21:25:47.592374Z",
          "shell.execute_reply.started": "2021-06-05T13:50:58.44175Z"
        },
        "papermill": {
          "duration": 0.1048,
          "end_time": "2021-06-05T21:25:47.592504",
          "exception": false,
          "start_time": "2021-06-05T21:25:47.487704",
          "status": "completed"
        },
        "tags": [],
        "id": "forty-strike"
      },
      "outputs": [],
      "source": [
        "#The function take model and message as parameter\n",
        "def classify_message(model,message):\n",
        "    \n",
        "    #We will treat message as a paragraphs containing multiple sentences(lines)\n",
        "    #we will extract individual lines\n",
        "    for sentences in message:\n",
        "        sentences=nltk.sent_tokenize(message)\n",
        "        \n",
        "        #Iterate over individual sentences\n",
        "        for sentence in sentences:\n",
        "            #replace all special characters\n",
        "            words=re.sub(\"[^a-zA-Z]\",\" \",sentence)\n",
        "            \n",
        "            #perform word tokenization of all non-english-stopwords\n",
        "            if words not in set(stopwords.words('english')):\n",
        "                word=nltk.word_tokenize(words)\n",
        "                word=\" \".join(word)\n",
        "    \n",
        "    #perform one_hot on tokenized word            \n",
        "    oneHot=[one_hot(word,n=vocab_size)]\n",
        "    \n",
        "    #create an embedded documnet using pad_sequences \n",
        "    #this can be fed to our model\n",
        "    text=pad_sequences(oneHot,maxlen=sentence_len,padding=\"pre\")\n",
        "    \n",
        "    #predict the text using model\n",
        "    predict=model.predict(text)\n",
        "    \n",
        "    #if predict value is greater than 0.5 its a spam\n",
        "    if predict>0.5:\n",
        "        print(\"It is a spam\")\n",
        "    #else the message is not a spam    \n",
        "    else:\n",
        "        print(\"It is not a spam\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "id": "blessed-terrorism",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:47.784826Z",
          "iopub.status.busy": "2021-06-05T21:25:47.783606Z",
          "iopub.status.idle": "2021-06-05T21:25:47.785943Z",
          "shell.execute_reply": "2021-06-05T21:25:47.786321Z",
          "shell.execute_reply.started": "2021-06-05T13:51:52.388543Z"
        },
        "papermill": {
          "duration": 0.100303,
          "end_time": "2021-06-05T21:25:47.786450",
          "exception": false,
          "start_time": "2021-06-05T21:25:47.686147",
          "status": "completed"
        },
        "tags": [],
        "id": "blessed-terrorism"
      },
      "outputs": [],
      "source": [
        "message1=\"I am having a bad day and I would like to have a break today\"\n",
        "message2=\"This is to inform you had won a lottery and the subscription will end in a week so call us.\"\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "id": "another-relaxation",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:48.165002Z",
          "iopub.status.busy": "2021-06-05T21:25:48.164498Z",
          "iopub.status.idle": "2021-06-05T21:25:48.234103Z",
          "shell.execute_reply": "2021-06-05T21:25:48.234704Z",
          "shell.execute_reply.started": "2021-06-05T13:52:36.309379Z"
        },
        "papermill": {
          "duration": 0.167248,
          "end_time": "2021-06-05T21:25:48.234873",
          "exception": false,
          "start_time": "2021-06-05T21:25:48.067625",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "another-relaxation",
        "outputId": "b0396cbb-b407-4a33-d171-fcab0e96eb44"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 27ms/step\n",
            "It is not a spam\n"
          ]
        }
      ],
      "source": [
        "classify_message(model,message1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "id": "genuine-tuning",
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-06-05T21:25:48.616009Z",
          "iopub.status.busy": "2021-06-05T21:25:48.615260Z",
          "iopub.status.idle": "2021-06-05T21:25:48.685924Z",
          "shell.execute_reply": "2021-06-05T21:25:48.685360Z",
          "shell.execute_reply.started": "2021-06-05T13:54:08.211881Z"
        },
        "papermill": {
          "duration": 0.168219,
          "end_time": "2021-06-05T21:25:48.686074",
          "exception": false,
          "start_time": "2021-06-05T21:25:48.517855",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "genuine-tuning",
        "outputId": "76d80b08-8063-45a9-baba-2b9a1edf71cd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 26ms/step\n",
            "It is a spam\n"
          ]
        }
      ],
      "source": [
        "classify_message(model,message2)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.10"
    },
    "papermill": {
      "default_parameters": {},
      "duration": 46.899887,
      "end_time": "2021-06-05T21:25:50.775740",
      "environment_variables": {},
      "exception": null,
      "input_path": "__notebook__.ipynb",
      "output_path": "__notebook__.ipynb",
      "parameters": {},
      "start_time": "2021-06-05T21:25:03.875853",
      "version": "2.3.3"
    },
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}